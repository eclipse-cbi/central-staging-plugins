
/*
 * Copyright (c) 2025 Eclipse Foundation and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * https://www.eclipse.org/legal/epl-2.0/
 *
 * SPDX-License-Identifier: EPL-2.0
 *
 * // Some portions generated by Co-Pilot
 */
package org.eclipse.cbi.central;

import okhttp3.*;
import com.fasterxml.jackson.databind.ObjectMapper;
import java.io.IOException;
import java.util.Map;

public class CentralPortalClient {
    // Generic error codes with parameterized descriptions
    private static final Map<Integer, String> ERROR_CODES = Map.of(
            400, "Bad request",
            401, "Unauthorized",
            403, "Forbidden",
            404, "Not found",
            500, "Internal server error");

    private String errorDescription(int code, String context) {
        String base = ERROR_CODES.getOrDefault(code, "Unexpected error");
        if (context != null && !context.isEmpty()) {
            return base + " - " + context;
        }
        return base;
    }

    private static final String DEFAULT_BASE_URL = "https://central.sonatype.com/api/v1/publisher";
    private final String baseUrl;
    private static final String HEADER_AUTH = "Authorization";
    private static final String HEADER_ACCEPT = "Accept";
    private static final String MEDIA_JSON = "application/json";
    private final String bearerToken;
    private final OkHttpClient client;
    private final ObjectMapper objectMapper;

    public CentralPortalClient(String bearerToken) {
        this(bearerToken, DEFAULT_BASE_URL);
    }

    public CentralPortalClient(String bearerToken, String baseUrl) {
        this.bearerToken = bearerToken;
        this.baseUrl = baseUrl != null && !baseUrl.isEmpty() ? baseUrl : DEFAULT_BASE_URL;
        this.client = new OkHttpClient();
        this.objectMapper = new ObjectMapper();
    }

    private Request.Builder baseRequest(String url) {
        return new Request.Builder()
                .url(url)
                .addHeader(HEADER_AUTH, "Bearer " + bearerToken)
                .addHeader(HEADER_ACCEPT, MEDIA_JSON);
    }

    private Map<String, Object> handleResponse(Response response, Map<Integer, String> errorMessages,
            boolean expectJson) throws IOException {
        int code = response.code();
        String body = response.body() != null ? response.body().string() : "";
        if (code == 200 && expectJson) {
            return objectMapper.readValue(body, Map.class);
        } else if (code == 204 && !expectJson) {
            return Map.of("success", true, "message", "Deployment published successfully.");
        } else if (errorMessages.containsKey(code)) {
            throw new IOException(errorMessages.get(code) + " (" + code + "): " + body);
        } else {
            throw new IOException("Unexpected HTTP code " + code + ": " + body);
        }
    }

    public Map<String, Object> checkPublished(String namespace, String name, String version) throws IOException {
        String url = baseUrl + "/published?namespace=" + namespace + "&name=" + name + "&version=" + version;
        Request request = baseRequest(url).get().build();
        try (Response response = client.newCall(request).execute()) {
            return handleResponse(response, Map.of(
                    400, errorDescription(400, "Check published"),
                    401, errorDescription(401, "Check published"),
                    403, errorDescription(403, "Check published"),
                    500, errorDescription(500, "Check published")), true);
        }
    }

    public Map<String, Object> getDeploymentStatus(String deploymentId) throws IOException {
        String url = baseUrl + "/status?id=" + deploymentId;
        Request request = baseRequest(url).post(RequestBody.create(new byte[0])).build();
        try (Response response = client.newCall(request).execute()) {
            return handleResponse(response, Map.of(
                    400, errorDescription(400, "Get deployment status"),
                    401, errorDescription(401, "Get deployment status"),
                    403, errorDescription(403, "Get deployment status"),
                    404, errorDescription(404, "Deployment not found"),
                    500, errorDescription(500, "Get deployment status")), true);
        }
    }

    public Map<String, Object> publishDeployment(String deploymentId) throws IOException {
        String url = baseUrl + "/deployment/" + deploymentId;
        Request request = baseRequest(url).post(RequestBody.create(new byte[0])).build();
        try (Response response = client.newCall(request).execute()) {
            return handleResponse(response, Map.of(
                    400, errorDescription(400, "Publish deployment"),
                    401, errorDescription(401, "Publish deployment"),
                    403, errorDescription(403, "Publish deployment"),
                    404, errorDescription(404, "Deployment not found"),
                    500, errorDescription(500, "Publish deployment")), false);
        }
    }

    // Drop a deployment (FAILED or VALIDATED state)
    public Map<String, Object> dropDeployment(String deploymentId) throws IOException {
        String url = baseUrl + "/deployment/" + deploymentId;
        Request request = baseRequest(url).delete().build();
        try (Response response = client.newCall(request).execute()) {
            int code = response.code();
            String body = response.body() != null ? response.body().string() : "";
            if (code == 204) {
                return Map.of("success", true, "message", "Deployment dropped successfully.");
            } else if (ERROR_CODES.containsKey(code)) {
                throw new IOException(errorDescription(code, "Drop deployment") + " (" + code + "): " + body);
            } else {
                throw new IOException("Unexpected HTTP code " + code + ": " + body);
            }
        }
    }

    // List deployments for a given pathStarting (namespace)
    public Map<String, Object> listDeployments(String pathStarting, int page, int size, String sortField,
            String sortDirection) throws IOException {
        String url = baseUrl + "/deployments/files";
        MediaType jsonType = MediaType.parse(MEDIA_JSON);
        String payload = String.format(
                "{\"page\":%d,\"size\":%d,\"sortField\":\"%s\",\"sortDirection\":\"%s\",\"pathStarting\":\"%s\"}",
                page, size, sortField, sortDirection, pathStarting);
        RequestBody body = RequestBody.create(payload, jsonType);
        Request request = baseRequest(url)
                .post(body)
                .build();
        try (Response response = client.newCall(request).execute()) {
            return handleResponse(response, Map.of(
                    400, errorDescription(400, "List deployments"),
                    401, errorDescription(401, "List deployments"),
                    403, errorDescription(403, "List deployments"),
                    500, errorDescription(500, "List deployments")), true);
        }
    }
}
